{"version":3,"sources":["module/index.js","index.js"],"names":["min","Math","max","sqrt","atan2","getDistanceVector","position1","position2","x1","x","y1","y","passiveSupported","options","Object","defineProperty","get","window","addEventListener","error","eventOptions","passive","documentMouseListeners","getOffsetPosition","element","elementRect","getBoundingClientRect","left","top","document","event","i","length","mouseListener","target","mouse","listenElement","moveEvent","call","upEvent","Mouse","container","classCallCheck","this","stoppingThread","lastUpdateTime","isMouseDown","scrollDelta","isTouching","previousPosition","previousDownPosition","position","direction","movedDistance","movingSpeed","preventDefault","enterEvents","leaveEvents","downEvents","upEvents","moveEvents","scrollEvents","dragEvents","dragOverEvents","dropEvents","stopEvents","clickEvents","_mouseEnter","bind","_mouseLeave","_mouseDown","_mouseUp","_mouseMove","_scroll","_dragOver","_drop","_touchEnter","_touchLeave","_touchStart","_touchEnd","_touchMove","_touchCancel","eventMap","mouseleave","events","listeners","name","method","added","mouseenter","mousedown","mouseup","mousemove","mousescroll","mousedragover","mousedrop","attach","keys","forEach","eventName","_eventMap$eventName","relevantEvents","concat","apply","_ref","removeEventListener","_ref2","_eventMap$eventName2","_ref3","_eventMap$eventName3","_ref4","_this","push","_updateListeners","_removeEvent","index","indexOf","splice","eventParams","_updatePosition","_fireEvents","isLeftButton","which","isMiddleButton","isRightButton","offsetPosition","clientX","clientY","_addDocumentMouseListener","_click","_removeDocumentMouseListener","_this2","clearTimeout","setTimeout","_stop","wheelDelta","detail","firstTouch","changedTouches","_this3","_this4","_this5","_this6","documentMouseListener","newPosition","currentTime","Date","now","_getDistanceVector","getDistance","timeDiff","_getDistanceVector2","getDirection","detach","isValidDOMElement","_addListeners","_removeListeners","enterEvent","_addEvent","_clearEvent","leaveEvent","downEvent","scrollEvent","dragEvent","dragOverEvent","dropEvent","stopEvent","clickEvent","Demo","props","possibleConstructorReturn","getPrototypeOf","state","setState","demo","onMove","e","_updateMouse","onStop","onLeave","_this$state","react_default","a","createElement","ref","d","id","className","toFixed","style","transform","Component","render","src_Demo","getElementById"],"mappings":"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","file":"static/js/main.a4ce8ce2.chunk.js","sourcesContent":["const { min, max, sqrt, atan2 } = Math;\n\n/** Calculate the distance from the origin position to the destination position. */\nconst getDistanceVector = (position1, position2) => {\n  if (position1 && position2) {\n    let { x: x1, y: y1 } = position1;\n    let { x: x2, y: y2 } = position2;\n\n    return { x: x2 - x1, y: y2 - y1 };\n  } else {\n    return { x: 0, y: 0 };\n  }\n};\n\n/** Calculate the distance from the origin position to the destination position. */\nconst getDistance = (position1, position2) => {\n  let { x, y } = getDistanceVector(position1, position2);\n  return sqrt(x * x + y * y);\n};\n\n/** Calculate the directional angle to the destination position\n *  in terms of the angle oriented to the East. */\nconst getDirection = (position1, position2) => {\n  let { x, y } = getDistanceVector(position1, position2);\n  return atan2(y, x);\n};\n\n/** Detecting option support */\nlet passiveSupported = false;\n\ntry {\n  let options = Object.defineProperty({}, \"passive\", {\n    get: () => (passiveSupported = true)\n  });\n\n  window.addEventListener(\"test\", null, options);\n} catch (error) {}\n\nconst eventOptions = passiveSupported ? { passive: true } : false;\n\n/* Mouse Buttons */\nconst LEFT_BUTTON = 1;\nconst MIDDLE_BUTTON = 2;\nconst RIGHT_BUTTON = 3;\n\n/* Time delay determined to be a mouse stops moving,\n   by default is 0.05 second. */\nconst STOP_DELAY = 50;\n\nconst documentMouseListeners = [];\n\nconst isValidDOMElement = element => {\n  return (\n    element &&\n    element.addEventListener &&\n    element.removeEventListener &&\n    element.getBoundingClientRect\n  );\n};\n\nconst getOffsetPosition = element => {\n  let elementRect = element.getBoundingClientRect();\n  elementRect.x = elementRect.x || elementRect.left;\n  elementRect.y = elementRect.y || elementRect.top;\n\n  return {\n    x: elementRect.x || elementRect.left,\n    y: elementRect.y || elementRect.top\n  };\n};\n\ndocument.addEventListener(\"mousemove\", event => {\n  for (let i = 0; i < documentMouseListeners.length; i++) {\n    let mouseListener = documentMouseListeners[i];\n\n    if (event.target !== mouseListener.mouse.listenElement) {\n      mouseListener.moveEvent.call(mouseListener.mouse, event);\n    }\n  }\n});\n\ndocument.addEventListener(\"mouseup\", event => {\n  for (let i = 0; i < documentMouseListeners.length; i++) {\n    let mouseListener = documentMouseListeners[i];\n\n    if (event.target !== mouseListener.mouse.listenElement) {\n      mouseListener.upEvent.call(mouseListener.mouse, event);\n    }\n  }\n});\n\nclass Mouse {\n  constructor(container) {\n    /* The DOM element that this mouse is listening to. */\n    this.listenElement = null;\n\n    /* The thread for calling the mouse stop event function. */\n    this.stoppingThread = null;\n\n    /* Previous update time-stamp of all mouse actions. */\n    this.lastUpdateTime = 0;\n\n    /* Whether a mouse key is pressed down. */\n    this.isMouseDown = false;\n\n    /* The delta value when the mouse scrolls. */\n    this.scrollDelta = 0;\n\n    /* Whether the mouse is currently contacted by touch surface. */\n    this.isTouching = false;\n\n    /* Previous mouse position. */\n    this.previousPosition = null;\n\n    /* Previous mouse position when a mouse button was pressed. */\n    this.previousDownPosition = null;\n\n    /* Current mouse position. */\n    this.position = null;\n\n    /* Current mouse direction. */\n    this.direction = 0;\n\n    /* Current mouse moved distance. */\n    this.movedDistance = 0;\n\n    /* Current mouse moving speed. */\n    this.movingSpeed = 0;\n\n    /* Whether the mouse skips the default behaviours upon the listen element. */\n    this.preventDefault = false;\n\n    /* The list of listeners this mouse is appended to.\n     * Each mouse event will trigger the corresponding method of each listeners. */\n    this.enterEvents = [];\n    this.leaveEvents = [];\n    this.downEvents = [];\n    this.upEvents = [];\n    this.moveEvents = [];\n    this.scrollEvents = [];\n    this.dragEvents = [];\n    this.dragOverEvents = [];\n    this.dropEvents = [];\n    this.stopEvents = [];\n    this.clickEvents = [];\n\n    /* Add bindings to all event methods to secure scoping. */\n    this._mouseEnter = this._mouseEnter.bind(this);\n    this._mouseLeave = this._mouseLeave.bind(this);\n    this._mouseDown = this._mouseDown.bind(this);\n    this._mouseUp = this._mouseUp.bind(this);\n    this._mouseMove = this._mouseMove.bind(this);\n    this._scroll = this._scroll.bind(this);\n    this._dragOver = this._dragOver.bind(this);\n    this._drop = this._drop.bind(this);\n    this._touchEnter = this._touchEnter.bind(this);\n    this._touchLeave = this._touchLeave.bind(this);\n    this._touchStart = this._touchStart.bind(this);\n    this._touchEnd = this._touchEnd.bind(this);\n    this._touchMove = this._touchMove.bind(this);\n    this._touchCancel = this._touchCancel.bind(this);\n\n    /*\n      The event mapping which maps the types of event to\n      which event listeners, and what events is depending\n      on those listeners.\n    */\n    this.eventMap = {\n      mouseleave: {\n        events: [this.enterEvents],\n        listeners: [\n          { name: \"mouseenter\", method: this._mouseEnter },\n          { name: \"touchenter\", method: this._touchEnter }\n        ],\n        added: false\n      },\n      mouseenter: {\n        events: [this.leaveEvents],\n        listeners: [\n          { name: \"mouseleave\", method: this._mouseLeave },\n          { name: \"touchleave\", method: this._touchLeave },\n          { name: \"touchcancel\", method: this._touchCancel }\n        ],\n        added: false\n      },\n      mousedown: {\n        events: [this.downEvents, this.clickEvents, this.dragEvents],\n        listeners: [\n          { name: \"mousedown\", method: this._mouseDown },\n          { name: \"touchstart\", method: this._touchStart }\n        ],\n        added: false\n      },\n      mouseup: {\n        events: [this.upEvents, this.clickEvents, this.dragEvents],\n        listeners: [\n          { name: \"mouseup\", method: this._mouseUp },\n          { name: \"touchend\", method: this._touchEnd }\n        ],\n        added: false\n      },\n      mousemove: {\n        events: [this.moveEvents, this.dragEvents, this.stopEvents],\n        listeners: [\n          { name: \"mousemove\", method: this._mouseMove },\n          { name: \"touchmove\", method: this._touchMove }\n        ],\n        added: false\n      },\n      mousescroll: {\n        events: [this.scrollEvents],\n        listeners: [\n          { name: \"mousewheel\", method: this._scroll },\n          { name: \"DOMMouseScroll\", method: this._scroll }\n        ],\n        added: false\n      },\n      mousedragover: {\n        events: [this.dragOverEvents],\n        listeners: [{ name: \"dragover\", method: this._dragOver }],\n        added: false\n      },\n      mousedrop: {\n        events: [this.dropEvents],\n        listeners: [{ name: \"drop\", method: this._drop }],\n        added: false\n      }\n    };\n\n    /* Append the canvas to the DIV container. */\n    if (container) {\n      this.attach(container);\n    }\n  }\n\n  /** Update listeners based on which events are in used. */\n  _updateListeners() {\n    const { listenElement, eventMap } = this;\n\n    if (listenElement !== null) {\n      Object.keys(eventMap).forEach(eventName => {\n        const { events, listeners, added } = eventMap[eventName];\n        const relevantEvents = [].concat.apply([], events);\n\n        if (relevantEvents.length === 0 && added === true) {\n          listeners.forEach(({ name, method }) =>\n            listenElement.removeEventListener(name, method)\n          );\n\n          eventMap[eventName].added = false;\n        } else if (relevantEvents.length > 0 && added === false) {\n          listeners.forEach(({ name, method }) =>\n            listenElement.addEventListener(name, method, eventOptions)\n          );\n\n          eventMap[eventName].added = true;\n        }\n      });\n    }\n  }\n\n  /** Add all essential listeners onto the element. */\n  _addListeners() {\n    const { listenElement, eventMap } = this;\n\n    Object.keys(eventMap).forEach(eventName => {\n      const { events, listeners, added } = eventMap[eventName];\n      const relevantEvents = [].concat.apply([], events);\n\n      if (relevantEvents.length > 0 && added === false) {\n        listeners.forEach(({ name, method }) =>\n          listenElement.addEventListener(name, method, eventOptions)\n        );\n\n        eventMap[eventName].added = true;\n      }\n    });\n  }\n\n  /** Remove all listeners from the element. */\n  _removeListeners() {\n    const { listenElement, eventMap } = this;\n\n    Object.keys(eventMap).forEach(eventName => {\n      const { listeners, added } = eventMap[eventName];\n\n      if (added === true) {\n        listeners.forEach(({ name, method }) =>\n          listenElement.removeEventListener(name, method)\n        );\n\n        eventMap[eventName].added = false;\n      }\n    });\n  }\n\n  /** Generic function for adding events. */\n  _addEvent(event, events) {\n    if (typeof event === \"function\") {\n      events.push(event);\n    }\n\n    this._updateListeners();\n\n    return () => this._removeEvent(event, events);\n  }\n\n  /** Generic function for removing events. */\n  _removeEvent(event, events) {\n    const index = events.indexOf(event);\n\n    if (index !== -1) {\n      events.splice(index, 1);\n    }\n\n    this._updateListeners();\n  }\n\n  /** Generic function for clearing all events. */\n  _clearEvent(events) {\n    events.splice(0, events.length);\n    this._updateListeners();\n  }\n\n  /** Generic function for firing events. */\n  _fireEvents(events, eventParams) {\n    for (let i = 0; i < events.length; i++) {\n      events[i](eventParams);\n    }\n  }\n\n  /** When the mouse comes into the parent container. */\n  _mouseEnter(event) {\n    let { isTouching, preventDefault } = this;\n\n    if (isTouching === false) {\n      /* Put mouse as a reference in the event. */\n      event.mouse = this;\n\n      /* Skip the default behaviours upon this event. */\n      if (preventDefault === true) {\n        event.preventDefault();\n      }\n\n      /* Update the mouse position with a null position to refresh the statistics. */\n      this._updatePosition(null);\n\n      /* Perform action for over event */\n      this._fireEvents(this.enterEvents, event);\n    }\n  }\n\n  /** When the mouse leaves parent container. */\n  _mouseLeave(event) {\n    let { isTouching, preventDefault } = this;\n\n    if (isTouching === false) {\n      /* Put mouse as a reference in the event. */\n      event.mouse = this;\n\n      /* Skip the default behaviours upon this event. */\n      if (preventDefault === true) {\n        event.preventDefault();\n      }\n\n      /* Update the mouse position with a null position to clear the statistics. */\n      this._updatePosition(null);\n\n      /* Perform action for out event */\n      this._fireEvents(this.leaveEvents, event);\n    }\n  }\n\n  /** When the mouse is pressed. */\n  _mouseDown(event) {\n    let { isTouching, preventDefault, listenElement } = this;\n\n    if (isTouching === false) {\n      /* Put mouse as a reference in the event. */\n      event.mouse = this;\n\n      /* Populate flags indicating which buton is pressed. */\n      this.isLeftButton = event.which === LEFT_BUTTON;\n      this.isMiddleButton = event.which === MIDDLE_BUTTON;\n      this.isRightButton = event.which === RIGHT_BUTTON;\n\n      /* Skip the default behaviours upon this event. */\n      if (preventDefault === true) {\n        event.preventDefault();\n      }\n\n      /* Update the mouse relative position. */\n      let offsetPosition = getOffsetPosition(listenElement);\n\n      this._updatePosition({\n        x: event.clientX - offsetPosition.x,\n        y: event.clientY - offsetPosition.y\n      });\n\n      /* Update the mouse previous down position.\n       * The variables needs to be extracted here after the update. */\n      let { position } = this;\n\n      this.previousDownPosition =\n        position !== null ? { x: position.x, y: position.y } : null;\n\n      /* Update the mouse down flag and time-stamp. */\n      this.isMouseDown = true;\n\n      /* Perform action for down event. */\n      this._fireEvents(this.downEvents, event);\n\n      this._addDocumentMouseListener();\n    }\n  }\n\n  /** When the mouse's button is released. */\n  _mouseUp(event) {\n    let { isTouching, preventDefault, listenElement, isMouseDown } = this;\n\n    if (isTouching === false) {\n      /* Put mouse as a reference in the event. */\n      event.mouse = this;\n\n      /* Populate flags indicating which buton is pressed. */\n      this.isLeftButton = event.which === LEFT_BUTTON;\n      this.isMiddleButton = event.which === MIDDLE_BUTTON;\n      this.isRightButton = event.which === RIGHT_BUTTON;\n\n      /* Skip the default behaviours upon this event. */\n      if (preventDefault === true) {\n        event.preventDefault();\n      }\n\n      /* Update the mouse relative position. */\n      let offsetPosition = getOffsetPosition(listenElement);\n\n      this._updatePosition({\n        x: event.clientX - offsetPosition.x,\n        y: event.clientY - offsetPosition.y\n      });\n\n      /* Update the mouse previous down position. */\n      this.previousDownPosition = null;\n\n      /* Run the client event method if the mouse was pressed previously. */\n      if (isMouseDown) {\n        this._click(event);\n      }\n\n      /* Update the mouse down flag. */\n      this.isMouseDown = false;\n\n      /* Perform action for up event. */\n      this._fireEvents(this.upEvents, event);\n\n      this._removeDocumentMouseListener();\n    }\n  }\n\n  /** When the mouse is moving. */\n  _mouseMove(event) {\n    let {\n      isTouching,\n      preventDefault,\n      listenElement,\n      isMouseDown,\n      stoppingThread\n    } = this;\n\n    if (isTouching === false) {\n      /* Put mouse as a reference in the event. */\n      event.mouse = this;\n\n      /* Skip the default behaviours upon this event. */\n      if (preventDefault === true) {\n        event.preventDefault();\n      }\n\n      /* Update the mouse relative position. */\n      let offsetPosition = getOffsetPosition(listenElement);\n\n      this._updatePosition({\n        x: event.clientX - offsetPosition.x,\n        y: event.clientY - offsetPosition.y\n      });\n\n      /* Re-initiate the stopping thread. */\n      clearTimeout(stoppingThread);\n      this.stoppingThread = setTimeout(() => this._stop(event), STOP_DELAY);\n\n      /* Perform action for move event. */\n      this._fireEvents(this.moveEvents, event);\n\n      /* If a mouse button is pressed, Perform action for drag event as well. */\n      if (isMouseDown === true) {\n        this._fireEvents(this.dragEvents, event);\n      }\n    }\n  }\n\n  /** When the mouse is scrolling. */\n  _scroll(event) {\n    let { isTouching, preventDefault, listenElement } = this;\n\n    if (isTouching === false) {\n      /* Put mouse as a reference in the event. */\n      event.mouse = this;\n\n      /* Skip the default behaviours upon this event. */\n      if (preventDefault === true) {\n        event.preventDefault();\n      }\n\n      /* Update the mouse relative position. */\n      let offsetPosition = getOffsetPosition(listenElement);\n\n      this._updatePosition({\n        x: event.clientX - offsetPosition.x,\n        y: event.clientY - offsetPosition.y\n      });\n\n      this.scrollDelta = max(-1, min(1, event.wheelDelta || -event.detail));\n\n      /* Perform action for scroll event. */\n      this._fireEvents(this.scrollEvents, event);\n    }\n  }\n\n  /** When the mouse is dragging something in the container. */\n  _dragOver(event) {\n    let { preventDefault, listenElement } = this;\n\n    /* Put mouse as a reference in the event. */\n    event.mouse = this;\n\n    /* Skip the default behaviours upon this event. */\n    if (preventDefault === true) {\n      event.preventDefault();\n    }\n\n    /* Update the mouse relative position. */\n    let offsetPosition = getOffsetPosition(listenElement);\n\n    this._updatePosition({\n      x: event.clientX - offsetPosition.x,\n      y: event.clientY - offsetPosition.y\n    });\n\n    /* Perform action for drag over event. */\n    this._fireEvents(this.dragOverEvents, event);\n  }\n\n  /** When the mouse has dropped something in the container. */\n  _drop(event) {\n    let { preventDefault, listenElement } = this;\n\n    /* Put mouse as a reference in the event. */\n    event.mouse = this;\n\n    /* Skip the default behaviours upon this event. */\n    if (preventDefault === true) {\n      event.preventDefault();\n    }\n\n    /* Update the mouse relative position. */\n    let offsetPosition = getOffsetPosition(listenElement);\n\n    this._updatePosition({\n      x: event.clientX - offsetPosition.x,\n      y: event.clientY - offsetPosition.y\n    });\n\n    /* Perform action for drop event. */\n    this._fireEvents(this.dropEvents, event);\n  }\n\n  /** When the mouse has stop moving in the container. */\n  _stop(event) {\n    let { isTouching } = this;\n\n    if (isTouching === false) {\n      /* Put mouse as a reference in the event. */\n      event.mouse = this;\n\n      /* Update the mouse to at rest. */\n      this.movedDistance = 0;\n      this.movingSpeed = 0;\n\n      /* Perform action for stop event. */\n      this._fireEvents(this.stopEvents, event);\n    }\n  }\n\n  /** When the mouse clicks. */\n  _click(event) {\n    let { isTouching, preventDefault, listenElement } = this;\n\n    if (isTouching === false) {\n      /* Put mouse as a reference in the event. */\n      event.mouse = this;\n\n      /* Skip the default behaviours upon this event. */\n      if (preventDefault === true) {\n        event.preventDefault();\n      }\n\n      /* Populate flags indicating which buton is pressed. */\n      this.isLeftButton = event.which === LEFT_BUTTON;\n      this.isMiddleButton = event.which === MIDDLE_BUTTON;\n      this.isRightButton = event.which === RIGHT_BUTTON;\n\n      /* Update the mouse relative position. */\n      let offsetPosition = getOffsetPosition(listenElement);\n\n      this._updatePosition({\n        x: event.clientX - offsetPosition.x,\n        y: event.clientY - offsetPosition.y\n      });\n\n      /* Perform action for click event. */\n      this._fireEvents(this.clickEvents, event);\n    }\n  }\n\n  /** When a contact is made on the touch surface. */\n  _touchStart(event) {\n    let { preventDefault, listenElement } = this;\n\n    this.isTouching = true;\n\n    /* Put mouse as a reference in the event. */\n    event.mouse = this;\n\n    /* Skip the default behaviours upon this event. */\n    if (preventDefault === true) {\n      event.preventDefault();\n    }\n\n    /* Update the mouse relative position. */\n    let offsetPosition = getOffsetPosition(listenElement);\n    let firstTouch = event.changedTouches && event.changedTouches[0];\n\n    this._updatePosition({\n      x: firstTouch.clientX - offsetPosition.x,\n      y: firstTouch.clientY - offsetPosition.y\n    });\n\n    /* Update the mouse down flag and time-stamp. */\n    this.isMouseDown = true;\n\n    /* Perform action for down event. */\n    this._fireEvents(this.downEvents, event);\n  }\n\n  /** When a contact is remove on the touch surface. */\n  _touchEnd(event) {\n    let { preventDefault, listenElement, isMouseDown } = this;\n\n    /* Put mouse as a reference in the event. */\n    event.mouse = this;\n\n    /* Skip the default behaviours upon this event. */\n    if (preventDefault === true) {\n      event.preventDefault();\n    }\n\n    /* Update the mouse relative position. */\n    let offsetPosition = getOffsetPosition(listenElement);\n    let firstTouch = event.changedTouches && event.changedTouches[0];\n\n    this._updatePosition({\n      x: firstTouch.clientX - offsetPosition.x,\n      y: firstTouch.clientY - offsetPosition.y\n    });\n\n    /* Run the client event method if the mouse was pressed previously. */\n    if (isMouseDown) {\n      this._click(event);\n    }\n\n    /* Update the mouse down flag. */\n    this.isMouseDown = false;\n\n    /* Perform action for up event. */\n    this._fireEvents(this.upEvents, event);\n\n    setTimeout(() => (this.isTouching = false), 0);\n  }\n\n  /** When a touch point moves across the touch surface. */\n  _touchMove(event) {\n    let { isMouseDown, preventDefault, listenElement, stoppingThread } = this;\n\n    this.isTouching = true;\n\n    /* Put mouse as a reference in the event. */\n    event.mouse = this;\n\n    /* Skip the default behaviours upon this event. */\n    if (preventDefault === true) {\n      event.preventDefault();\n    }\n\n    /* Update the mouse relative position. */\n    let offsetPosition = getOffsetPosition(listenElement);\n    let firstTouch = event.changedTouches && event.changedTouches[0];\n\n    this._updatePosition({\n      x: firstTouch.clientX - offsetPosition.x,\n      y: firstTouch.clientY - offsetPosition.y\n    });\n\n    /* Re-initiate the stopping thread. */\n    clearTimeout(stoppingThread);\n    this.stoppingThread = setTimeout(() => this._stop(event), STOP_DELAY);\n\n    /* Perform action for move event. */\n    this._fireEvents(this.moveEvents, event);\n\n    /* If a mouse button is pressed, perform action for drag event as well. */\n    if (isMouseDown === true) {\n      this._fireEvents(this.dragEvents, event);\n    }\n  }\n\n  /** When a contact enters the bound-to element on the touch surface. */\n  _touchEnter(event) {\n    let { preventDefault } = this;\n\n    this.isTouching = true;\n\n    /* Put mouse as a reference in the event. */\n    event.mouse = this;\n\n    /* Skip the default behaviours upon this event. */\n    if (preventDefault === true) {\n      event.preventDefault();\n    }\n\n    /* Update the mouse position with a null position to refresh the statistics. */\n    this._updatePosition(null);\n\n    /* Perform action for over event */\n    this._fireEvents(this.enterEvents, event);\n  }\n\n  /** When a contact leaves the bound-to element on the touch surface. */\n  _touchLeave(event) {\n    let { preventDefault } = this;\n\n    /* Put mouse as a reference in the event. */\n    event.mouse = this;\n\n    /* Skip the default behaviours upon this event. */\n    if (preventDefault === true) {\n      event.preventDefault();\n    }\n\n    /* Update the mouse position with a null position to refresh the statistics. */\n    this._updatePosition(null);\n\n    /* Perform action for over event. */\n    this._fireEvents(this.leaveEvents, event);\n\n    setTimeout(() => (this.isTouching = false), 0);\n  }\n\n  /** When a contact gets cancelled. This can occur if the user has moved\n   *\tthe touch point outside the browser UI or into a plugin or if an alert modal pops up. */\n  _touchCancel(event) {\n    let { preventDefault } = this;\n\n    /* Put mouse as a reference in the event. */\n    event.mouse = this;\n\n    /* Skip the default behaviours upon this event. */\n    if (preventDefault === true) {\n      event.preventDefault();\n    }\n\n    /* Update the mouse position with a null position to refresh the statistics. */\n    this._updatePosition(null);\n\n    /* Perform action for over event. */\n    this._fireEvents(this.leaveEvents, event);\n\n    setTimeout(() => (this.isTouching = false), 0);\n  }\n\n  /** When the mouse is dragged, this method is called to retain tracking\n   *  even when the mouse is outside the container. */\n  _addDocumentMouseListener() {\n    this.documentMouseListener = {\n      mouse: this,\n      moveEvent: this._mouseMove,\n      upEvent: this._mouseUp\n    };\n\n    documentMouseListeners.push(this.documentMouseListener);\n  }\n\n  /** When a mouse drag ends, this method is called to lose track of\n   *  the mouse when the it is outside the container. */\n  _removeDocumentMouseListener() {\n    let index = documentMouseListeners.indexOf(this.documentMouseListener);\n\n    if (index !== -1) {\n      documentMouseListeners.splice(index, 1);\n    }\n  }\n\n  /** Update the Position of the mouse. */\n  _updatePosition(newPosition) {\n    /* Get the current time. */\n    let currentTime = Date.now();\n    let { position, lastUpdateTime } = this;\n\n    /* Calculate the moved distance. */\n    let movedDistance = getDistance(position, newPosition);\n\n    this.movedDistance = movedDistance;\n\n    /* Calculate the moving speed from time difference and distance. */\n    let timeDiff = (currentTime - lastUpdateTime) / 1000;\n    this.movingSpeed = timeDiff > 0 ? movedDistance / timeDiff : 0;\n\n    /* Update the mouse direction with the new position. */\n    if (movedDistance) {\n      this.direction = getDirection(position, newPosition);\n    }\n\n    /* Update the mouse position. */\n    this.previousPosition =\n      position !== null ? { x: position.x, y: position.y } : null;\n\n    this.position =\n      newPosition !== null ? { x: newPosition.x, y: newPosition.y } : null;\n\n    /* Update the time-stamp. */\n    this.lastUpdateTime = currentTime;\n  }\n\n  /** Append the mouse to the a DOM element and event functions to it. */\n  attach(element) {\n    const { listenElement } = this;\n\n    /* Remove the previous element first before attach a new one. */\n    if (listenElement) {\n      this.detach();\n    }\n\n    if (isValidDOMElement(element)) {\n      /* Store a reference of the DOM element. */\n      this.listenElement = element;\n\n      /* Add the essential listeners. */\n      this._addListeners();\n    }\n  }\n\n  /** Disengage the mouse from DOM element and event functions from it. */\n  detach() {\n    /* Disengage all the mouse events from each corresponding handler. */\n    this._removeListeners();\n\n    /* Remove the reference of the DOM element. */\n    this.listenElement = null;\n  }\n\n  /** Toggle value for mouse prevent default on all events. */\n  setPreventDefault(preventDefault) {\n    this.preventDefault = preventDefault === true;\n  }\n\n  /** Bind an event handler to the mouse enter event. */\n  onEnter(enterEvent) {\n    return this._addEvent(enterEvent, this.enterEvents);\n  }\n\n  /** Unbind an event handler to the mouse enter event. */\n  removeEnter(enterEvent) {\n    this._removeEvent(enterEvent, this.enterEvents);\n  }\n\n  /** Unbind all event handlers from the mouse enter event. */\n  clearEnter() {\n    this._clearEvent(this.enterEvents);\n  }\n\n  /** Bind an event handler to the mouse leave event. */\n  onLeave(leaveEvent) {\n    return this._addEvent(leaveEvent, this.leaveEvents);\n  }\n\n  /** Unbind an event handler to the mouse leave event. */\n  removeLeave(leaveEvent) {\n    this._removeEvent(leaveEvent, this.leaveEvents);\n  }\n\n  /** Unbind all event handlers from the mouse leave event. */\n  clearLeave() {\n    this._clearEvent(this.leaveEvents);\n  }\n\n  /** Bind an event handler to the mouse down event. */\n  onDown(downEvent) {\n    return this._addEvent(downEvent, this.downEvents);\n  }\n\n  /** Unbind an event handler to the mouse down event. */\n  removeDown(downEvent) {\n    this._removeEvent(downEvent, this.downEvents);\n  }\n\n  /** Unbind all event handlers from the mouse down event. */\n  clearDown() {\n    this._clearEvent(this.downEvents);\n  }\n\n  /** Bind an event handler to the mouse up event. */\n  onUp(upEvent) {\n    return this._addEvent(upEvent, this.upEvents);\n  }\n\n  /** Unbind an event handler to the mouse up event. */\n  removeUp(upEvent) {\n    this._removeEvent(upEvent, this.upEvents);\n  }\n\n  /** Unbind all event handlers from the mouse up event. */\n  clearUp() {\n    this._clearEvent(this.upEvents);\n  }\n\n  /** Bind an event handler to the mouse move event. */\n  onMove(moveEvent) {\n    return this._addEvent(moveEvent, this.moveEvents);\n  }\n\n  /** Unbind an event handler to the mouse move event. */\n  removeMove(moveEvent) {\n    this._removeEvent(moveEvent, this.moveEvents);\n  }\n\n  /** Unbind all event handlers from the mouse move event. */\n  clearMove() {\n    this._clearEvent(this.moveEvents);\n  }\n\n  /** Bind an event handler to the scroll event. */\n  onScroll(scrollEvent) {\n    return this._addEvent(scrollEvent, this.scrollEvents);\n  }\n\n  /** Unbind an event handler to the scroll event. */\n  removeScroll(scrollEvent) {\n    this._removeEvent(scrollEvent, this.scrollEvents);\n  }\n\n  /** Unbind all event handlers from the mouse scroll event. */\n  clearScroll() {\n    this._clearEvent(this.scrollEvents);\n  }\n\n  /** Bind an event handler to the drag event. */\n  onDrag(dragEvent) {\n    return this._addEvent(dragEvent, this.dragEvents);\n  }\n\n  /** Unbind an event handler to the drag event. */\n  removeDrag(dragEvent) {\n    this._removeEvent(dragEvent, this.dragEvents);\n  }\n\n  /** Unbind all event handlers from the mouse drag event. */\n  clearDrag() {\n    this._clearEvent(this.dragEvents);\n  }\n\n  /** Bind an event handler to the drag over event. */\n  onDragOver(dragOverEvent) {\n    return this._addEvent(dragOverEvent, this.dragOverEvents);\n  }\n\n  /** Unbind an event handler to the drag over event. */\n  removeDragOver(dragOverEvent) {\n    this._removeEvent(dragOverEvent, this.dragOverEvents);\n  }\n\n  /** Unbind all event handlers from the drag over event. */\n  clearDragOver() {\n    this._clearEvent(this.dragOverEvents);\n  }\n\n  /** Bind an event handler to the drop event. */\n  onDrop(dropEvent) {\n    return this._addEvent(dropEvent, this.dropEvents);\n  }\n\n  /** Unbind an event handler to the drop event. */\n  removeDrop(dropEvent) {\n    this._removeEvent(dropEvent, this.dropEvents);\n  }\n\n  /** Unbind all event handlers from the drop event. */\n  clearDrop() {\n    this._clearEvent(this.dropEvents);\n  }\n\n  /** Bind all event handlers from the stop event. */\n  onStop(stopEvent) {\n    return this._addEvent(stopEvent, this.stopEvents);\n  }\n\n  /** Unbind an event handler to the stop event. */\n  removeStop(stopEvent) {\n    this._removeEvent(stopEvent, this.stopEvents);\n  }\n\n  /** Unbind all event handlers from the stop event. */\n  clearStop() {\n    this._clearEvent(this.stopEvents);\n  }\n\n  /** Bind all event handlers from the click event. */\n  onClick(clickEvent) {\n    return this._addEvent(clickEvent, this.clickEvents);\n  }\n\n  /** Unbind an event handler to the click event. */\n  removeClick(clickEvent) {\n    this._removeEvent(clickEvent, this.clickEvents);\n  }\n\n  /** Unbind all event handlers from the click event. */\n  clearClick() {\n    this._clearEvent(this.clickEvents);\n  }\n}\n\nexport default Mouse;\n","import React, { Component } from \"react\";\nimport { render } from \"react-dom\";\n\nimport Mouse from \"./module\";\n\nimport \"./style.css\";\n\nclass Demo extends Component {\n  constructor(props) {\n    super(props);\n\n    this.mouse = new Mouse();\n\n    this.state = { direction: 0, movingSpeed: 0 };\n  }\n\n  _updateMouse(mouse) {\n    const { position, direction, movingSpeed } = mouse;\n    this.setState({ position, direction, movingSpeed });\n  }\n\n  componentDidMount() {\n    this.mouse.attach(this.demo);\n\n    this.mouse.onMove(e => this._updateMouse(e.mouse));\n    this.mouse.onStop(e => this._updateMouse(e.mouse));\n    this.mouse.onLeave(() => this.setState({ x: 0, y: 0, movingSpeed: 0 }));\n  }\n\n  componentWillUnmount() {\n    this.mouse.detach();\n  }\n\n  render() {\n    const { position, direction, movingSpeed } = this.state;\n\n    return (\n      <div ref={d => (this.demo = d)} id=\"demo\">\n        <div id=\"status\">\n          <div className=\"title\">Mouse details</div>\n          <div className=\"position\">\n            position (x, y):\n            {position && (\n              <span>\n                {position.x}, {position.y}\n              </span>\n            )}\n          </div>\n          <div className=\"direction\">\n            direction (rad):\n            {position && <span>{direction.toFixed(2)}</span>}\n          </div>\n          <div>\n            moving speed (pi/s):\n            {position && <span>{movingSpeed.toFixed(2)}</span>}\n          </div>\n        </div>\n        {position && (\n          <div\n            id=\"mouse\"\n            style={{\n              top: position.y,\n              left: position.x\n            }}\n          >\n            <span\n              style={{\n                transform: `translateY(-50%) rotate(${direction}rad) scale(${1 +\n                  movingSpeed / 200}, ${1 + movingSpeed / 400})`\n              }}\n            >\n              →\n            </span>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nrender(<Demo />, document.getElementById(\"root\"));\n"],"sourceRoot":""}